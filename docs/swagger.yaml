basePath: /
definitions:
  dto.CreateUserRequest:
    properties:
      email:
        example: joao@email.com
        type: string
      name:
        example: João Silva
        type: string
    required:
    - email
    - name
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: user not found
        type: string
      message:
        example: O usuário com ID especificado não foi encontrado
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        example: joao.santos@email.com
        type: string
      name:
        example: João Santos
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2024-07-08T10:30:00Z"
        type: string
      email:
        example: joao@email.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      name:
        example: João Silva
        type: string
      updated_at:
        example: "2024-07-08T11:45:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: jvferreiro1@gmail.com
    name: João Vitor
    url: http://www.swagger.io/support
  description: API para gerenciamento de usuários usando Domain-Driven Design
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: User API
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Verifica se a API está funcionando
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health Check
      tags:
      - health
  /users:
    get:
      consumes:
      - application/json
      description: Retorna todos os usuários cadastrados
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Listar usuários
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Cria um novo usuário no sistema
      parameters:
      - description: Dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Criar usuário
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Remove um usuário do sistema
      parameters:
      - description: ID do usuário
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Deletar usuário
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retorna um usuário específico pelo ID
      parameters:
      - description: ID do usuário
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Buscar usuário por ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Atualiza os dados de um usuário existente
      parameters:
      - description: ID do usuário
        in: path
        name: id
        required: true
        type: string
      - description: Dados para atualização
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Atualizar usuário
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
